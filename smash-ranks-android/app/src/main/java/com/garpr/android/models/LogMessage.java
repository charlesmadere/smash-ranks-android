package com.garpr.android.models;


import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import com.garpr.android.App;
import com.garpr.android.R;
import com.garpr.android.misc.Constants;
import com.garpr.android.misc.Utils;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Comparator;


public class LogMessage implements Parcelable {


    private final int mId;
    private final Priority mPriority;
    private final String mMessage;
    private final String mStacktrace;
    private final String mTag;
    private final String mThrowableMessage;




    public LogMessage(final int id, final Priority priority, final String tag,
            final String message, final String stacktrace, final String throwableMessage) {
        mId = id;
        mPriority = priority;
        mTag = tag;
        mMessage = message;
        mStacktrace = stacktrace;
        mThrowableMessage = throwableMessage;
    }


    public LogMessage(final JSONObject json) throws JSONException {
        mId = json.getInt(Constants.ID);
        mPriority = Priority.values()[json.getInt(Constants.PRIORITY)];
        mMessage = json.getString(Constants.MSG);
        mStacktrace = json.optString(Constants.STACKTRACE, null);
        mTag = json.getString(Constants.TAG);
        mThrowableMessage = json.optString(Constants.THROWABLE_MSG, null);
    }


    private LogMessage(final Parcel source) {
        mId = source.readInt();
        mPriority = Priority.values()[source.readInt()];
        mMessage = source.readString();
        mStacktrace = source.readString();
        mTag = source.readString();
        mThrowableMessage = source.readString();
    }


    @Override
    public boolean equals(final Object o) {
        final boolean isEqual;

        if (this == o) {
            isEqual = true;
        } else if (o instanceof LogMessage) {
            final LogMessage lm = (LogMessage) o;

            if (mId == lm.getId() && mPriority == lm.getPriority() &&
                    mMessage.equals(lm.getMessage()) && mTag.equals(lm.getTag())) {
                if (isThrowable() && lm.isThrowable()) {
                    isEqual = mStacktrace.equals(lm.getStacktrace()) &&
                            mThrowableMessage.equals(lm.getThrowableMessage());
                } else if (!isThrowable() && !lm.isThrowable()) {
                    isEqual = true;
                } else {
                    isEqual = false;
                }
            } else {
                isEqual = false;
            }
        } else {
            isEqual = false;
        }

        return isEqual;
    }


    public int getId() {
        return mId;
    }


    public String getMessage() {
        return mMessage;
    }


    public Priority getPriority() {
        return mPriority;
    }


    public String getStacktrace() {
        return mStacktrace;
    }


    public String getTag() {
        return mTag;
    }


    public String getThrowableMessage() {
        return mThrowableMessage;
    }


    @Override
    public int hashCode() {
        // this method was automatically generated by Android Studio

        int result = mId;
        result = 31 * result + mPriority.hashCode();
        result = 31 * result + mMessage.hashCode();
        result = 31 * result + (mStacktrace != null ? mStacktrace.hashCode() : 0);
        result = 31 * result + mTag.hashCode();
        result = 31 * result + (mThrowableMessage != null ? mThrowableMessage.hashCode() : 0);

        return result;
    }


    public boolean isThrowable() {
        return Utils.validStrings(mStacktrace, mThrowableMessage);
    }


    public JSONObject toJSON() {
        try {
            final JSONObject json = new JSONObject();
            json.put(Constants.ID, mId);
            json.put(Constants.PRIORITY, mPriority.ordinal());
            json.put(Constants.MSG, mMessage);
            json.put(Constants.TAG, mTag);

            if (isThrowable()) {
                json.put(Constants.STACKTRACE, mStacktrace);
                json.put(Constants.THROWABLE_MSG, mThrowableMessage);
            }

            return json;
        } catch (final JSONException e) {
            throw new RuntimeException(e);
        }
    }


    @Override
    public String toString() {
        final Context context = App.get();
        return context.getString(R.string.x_colon_y, mTag, mMessage);
    }


    public static final Comparator<LogMessage> ID_ORDER = new Comparator<LogMessage>() {
        @Override
        public int compare(final LogMessage lhs, final LogMessage rhs) {
            return lhs.getId() - rhs.getId();
        }
    };




    /*
     * Code necessary for the Android Parcelable interface is below. Read more here:
     * https://developer.android.com/intl/es/reference/android/os/Parcelable.html
     */


    @Override
    public int describeContents() {
        return 0;
    }


    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeInt(mId);
        dest.writeInt(mPriority.ordinal());
        dest.writeString(mMessage);
        dest.writeString(mStacktrace);
        dest.writeString(mTag);
        dest.writeString(mThrowableMessage);
    }


    public static final Creator<LogMessage> CREATOR = new Creator<LogMessage>() {
        @Override
        public LogMessage createFromParcel(final Parcel source) {
            return new LogMessage(source);
        }


        @Override
        public LogMessage[] newArray(final int size) {
            return new LogMessage[size];
        }
    };




    public enum Priority {


        DEBUG(Log.DEBUG, R.color.white),
        ERROR(Log.ERROR, R.color.console_error),
        WARN(Log.WARN, R.color.console_warn);


        private final int mColor;
        private final int mCode;


        Priority(final int code, final int color) {
            mCode = code;
            mColor = ContextCompat.getColor(App.get(), color);
        }


        public int getColor() {
            return mColor;
        }


        public int getCode() {
            return mCode;
        }


    }


}
